import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { FiMinus, FiPlus, FiShoppingCart, FiTruck, FiShield, FiCheck, FiArrowLeft, FiMapPin, FiUser, FiCalendar, FiPhone, FiMail, FiMessageCircle } from 'react-icons/fi';
import './ProductDetail.css';
import meoFallback from '../../assets/meo.jpg';
import { productService } from '../../services/productService';

const ProductDetail = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  
  // States
  const [product, setProduct] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [selectedImage, setSelectedImage] = useState(0);
  const [isInCart, setIsInCart] = useState(false);

  // Check if product is in cart
  const checkProductInCart = () => {
    try {
      const existingCart = JSON.parse(localStorage.getItem('cart') || '[]');
      const isProductInCart = existingCart.some(item => item.id === parseInt(id));
      setIsInCart(isProductInCart);
    } catch (error) {
      console.error('Error checking cart:', error);
      setIsInCart(false);
    }
  };

  // Fetch product data
  useEffect(() => {
    const fetchProduct = async () => {
      try {
        setLoading(true);
        setError(null);
        
        console.log('Fetching product with ID:', id);
        const response = await productService.getProductById(id);
        
        console.log('Product response:', response);
        
        if (response && response.data) {
          setProduct(response.data);
        } else {
          throw new Error('Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m');
        }
      } catch (err) {
        console.error('Error fetching product:', err);
        setError(err.message || 'L·ªói khi t·∫£i s·∫£n ph·∫©m');
      } finally {
        setLoading(false);
      }
    };

    if (id) {
      fetchProduct();
      checkProductInCart();
    }
  }, [id]);

  // Listen for cart updates
  useEffect(() => {
    const handleCartUpdate = () => {
      checkProductInCart();
    };

    window.addEventListener('cartUpdated', handleCartUpdate);
    return () => {
      window.removeEventListener('cartUpdated', handleCartUpdate);
    };
  }, [id]);

  // Format price to VND
  const formatPrice = (price) => {
    return new Intl.NumberFormat('vi-VN', { 
      style: 'currency', 
      currency: 'VND' 
    }).format(price);
  };

  // Format date
  const formatDate = (date) => {
    return new Date(date).toLocaleDateString('vi-VN', { 
      day: '2-digit', 
      month: '2-digit', 
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  // Get status display
  const getStatusDisplay = (status) => {
    switch (status) {
      case 'active':
        return { text: 'C√≤n h√†ng', color: '#00a699' };
      case 'sold':
        return { text: 'ƒê√£ b√°n', color: '#ff5722' };
      case 'inactive':
        return { text: 'Ng·ª´ng b√°n', color: '#9e9e9e' };
      default:
        return { text: 'Kh√¥ng r√µ', color: '#9e9e9e' };
    }
  };

  // Get category color
  const getCategoryColor = (categoryName) => {
    const colors = {
      'Ch√≥': '#ff9800',
      'M√®o': '#2196f3',
      'C√°': '#00bcd4',
      'Chim': '#4caf50',
      'S√≥c': '#795548',
      'Th·ª©c ƒÉn th√∫ c∆∞ng': '#ff5722',
      'Ph·ª• ki·ªán': '#9c27b0',
      'D·ªãch v·ª•': '#607d8b',
      'Y t·∫ø & Thu·ªëc': '#f44336',
      'Chu·ªìng, nh√† & gi∆∞·ªùng': '#3f51b5'
    };
    return colors[categoryName] || '#9e9e9e';
  };

  // Remove these functions:
  // - increaseQuantity
  // - decreaseQuantity  
  // - handleQuantityChange

  // Add to cart handler
  const handleAddToCart = () => {
    if (product.status !== 'active') {
      alert('S·∫£n ph·∫©m n√†y hi·ªán kh√¥ng kh·∫£ d·ª•ng');
      return;
    }

    if (isInCart) {
      alert('S·∫£n ph·∫©m ƒë√£ c√≥ trong gi·ªè h√†ng!');
      return;
    }
  
    const cartItem = {
      id: product.id_product,
      name: product.name,
      price: product.price,
      image: product.image,
      quantity: 1, // Fixed quantity
      seller: product.user?.name_display || product.seller?.name_display || 'Kh√¥ng r√µ'
    };
  
    try {
      const existingCart = JSON.parse(localStorage.getItem('cart') || '[]');
      existingCart.push(cartItem);
      
      localStorage.setItem('cart', JSON.stringify(existingCart));
      
      // Trigger custom event to update cart count
      window.dispatchEvent(new Event('cartUpdated'));
      
      setIsInCart(true);
      alert('ƒê√£ th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng!');
    } catch (error) {
      console.error('Error adding to cart:', error);
      alert('C√≥ l·ªói x·∫£y ra khi th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng');
    }
  };

  // Go to cart handler
  const handleGoToCart = () => {
    navigate('/cart');
  };

  // Buy now handler
  const handleBuyNow = () => {
    if (product.status !== 'active') {
      alert('S·∫£n ph·∫©m n√†y hi·ªán kh√¥ng kh·∫£ d·ª•ng');
      return;
    }

    handleAddToCart();
    navigate('/cart');
  };

  // Contact seller
  const handleContactSeller = () => {
    const sellerInfo = product.seller || product.user || {};
    const sellerName = sellerInfo.name_display || 'Ng∆∞·ªùi b√°n';
    const sellerPhone = sellerInfo.numberphone || sellerInfo.phone || 'N/A';
    const sellerEmail = sellerInfo.email || 'N/A';
    const sellerLocation = sellerInfo.location || 'N/A';
    
    alert(`Li√™n h·ªá v·ªõi ${sellerName}\nEmail: ${sellerEmail}\nSƒêT: ${sellerPhone}\nƒê·ªãa ch·ªâ: ${sellerLocation}`);
  };

  // Loading state
  if (loading) {
    return (
      <div className="product-detail-page">
        <div className="container">
          <div className="detail-loading-container">
            <div className="detail-loading-spinner"></div>
            <p>ƒêang t·∫£i th√¥ng tin s·∫£n ph·∫©m...</p>
          </div>
        </div>
      </div>
    );
  }

  // Error state
  if (error) {
    return (
      <div className="product-detail-page">
        <div className="container">
          <div className="detail-error-container">
            <h2>‚ùå L·ªói</h2>
            <p>{error}</p>
            <button onClick={() => navigate('/products')} className="detail-btn-back">
              Quay l·∫°i danh s√°ch s·∫£n ph·∫©m
            </button>
          </div>
        </div>
      </div>
    );
  }

  // No product found
  if (!product) {
    return (
      <div className="product-detail-page">
        <div className="container">
          <div className="detail-error-container">
            <h2>üîç Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m</h2>
            <p>S·∫£n ph·∫©m b·∫°n t√¨m ki·∫øm kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã x√≥a.</p>
            <button onClick={() => navigate('/products')} className="detail-btn-back">
              Quay l·∫°i danh s√°ch s·∫£n ph·∫©m
            </button>
          </div>
        </div>
      </div>
    );
  }

  const statusInfo = getStatusDisplay(product.status);
  
  return (
    <div className="product-detail-page">
      <div className="container">
        {/* Back Button */}
        <button onClick={() => navigate(-1)} className="detail-back-button">
          <FiArrowLeft /> Quay l·∫°i
        </button>

        {/* Breadcrumb */}
        <div className="detail-breadcrumb">
          <a href="/">Trang ch·ªß</a>
          <span> &gt; </span>
          <a href="/products">S·∫£n ph·∫©m</a>
          <span> &gt; </span>
          <span style={{ color: getCategoryColor(product.category?.name) }}>
            {product.category?.name || 'Ch∆∞a ph√¢n lo·∫°i'}
          </span>
          <span> &gt; </span>
          <span>{product.name}</span>
        </div>
        
        <div className="detail-main-container">
          {/* Product Images */}
          <div className="detail-image-section">
            <div className="detail-main-image">
              <img 
                src={product.image || meoFallback} 
                alt={product.name}
                onError={(e) => {
                  e.target.onerror = null;
                  e.target.src = meoFallback;
                }}
              />
            </div>
          </div>
          
          {/* Product Info */}
          <div className="detail-product-info">
            {/* Category Badge */}
            <div className="detail-category-badge" style={{ backgroundColor: getCategoryColor(product.category?.name) }}>
              {product.category?.name || 'Ch∆∞a ph√¢n lo·∫°i'}
            </div>

            {/* Product Name */}
            <h1 className="detail-product-name">{product.name}</h1>
            
            {/* Product Meta Info */}
            <div className="detail-meta-info">
              <div className="detail-meta-item">
                <FiCalendar className="detail-meta-icon" />
                <span>ƒêƒÉng ng√†y: {formatDate(product.date)}</span>
              </div>
              <div className="detail-meta-item">
                <FiUser className="detail-meta-icon" />
                <span>Ng∆∞·ªùi b√°n: {product.seller?.name_display || product.user?.name_display || 'Ch∆∞a c·∫≠p nh·∫≠t'}</span>
              </div>
              {(product.seller?.location || product.user?.location) && (
                <div className="detail-meta-item">
                  <FiMapPin className="detail-meta-icon" />
                  <span>ƒê·ªãa ƒëi·ªÉm: {product.seller?.location || product.user?.location}</span>
                </div>
              )}
            </div>

            {/* Product Status */}
            <div className="detail-status-badge" style={{ backgroundColor: statusInfo.color }}>
              {statusInfo.text}
            </div>
            
            {/* Product Price */}
            <div className="detail-product-price">
              <span className="detail-current-price">{formatPrice(product.price)}</span>
            </div>
            
            {/* Product Actions */}
            <div className="detail-product-actions">
              {product.status === 'active' ? (
                <>
                  {isInCart ? (
                    <>
                      <button className="detail-in-cart-btn" disabled>
                        <FiCheck /> ƒê√£ c√≥ trong gi·ªè
                      </button>
                      <button className="detail-go-to-cart-btn" onClick={handleGoToCart}>
                        <FiShoppingCart /> Xem gi·ªè h√†ng
                      </button>
                    </>
                  ) : (
                    <>
                      <button className="detail-add-to-cart-btn" onClick={handleAddToCart}>
                        <FiShoppingCart /> Th√™m v√†o gi·ªè
                      </button>
                      <button className="detail-buy-now-btn" onClick={handleBuyNow}>
                        Mua ngay
                      </button>
                    </>
                  )}
                </>
              ) : (
                <button className="detail-contact-seller-btn" onClick={handleContactSeller}>
                  <FiUser /> Li√™n h·ªá ng∆∞·ªùi b√°n
                </button>
              )}
            </div>
            
            {/* Product Policies */}
            <div className="detail-product-policies">
              <div className="detail-policy-item">
                <FiTruck className="detail-policy-icon" />
                <span>Giao h√†ng t·∫≠n n∆°i</span>
              </div>
              <div className="detail-policy-item">
                <FiShield className="detail-policy-icon" />
                <span>H·ªó tr·ª£ ƒë·ªïi tr·∫£</span>
              </div>
              <div className="detail-policy-item">
                <FiCheck className="detail-policy-icon" />
                <span>S·∫£n ph·∫©m ch√≠nh h√£ng</span>
              </div>
            </div>
          </div>
        </div>
        
        {/* Product Description */}
        <div className="detail-description-container">
          <h2>M√¥ t·∫£ s·∫£n ph·∫©m</h2>
          <div className="detail-product-description">
            <p>{product.description || 'Ch∆∞a c√≥ m√¥ t·∫£ chi ti·∫øt cho s·∫£n ph·∫©m n√†y.'}</p>
            
            {/* Seller Information */}
            <div className="detail-seller-info">
              <h3>Th√¥ng tin ng∆∞·ªùi b√°n</h3>
              <div className="detail-seller-details">
                <div className="detail-seller-content">
                  <p><strong>T√™n:</strong> {product.seller?.name_display || product.user?.name_display || 'Ch∆∞a c·∫≠p nh·∫≠t'}</p>
                  <p><strong>SƒêT:</strong> {product.seller?.numberphone || product.user?.numberphone || 'Ch∆∞a c·∫≠p nh·∫≠t'}</p>
                  <p><strong>Email:</strong> {product.seller?.email || product.user?.email || 'Ch∆∞a c·∫≠p nh·∫≠t'}</p>
                  {(product.seller?.location || product.user?.location) && (
                    <p><strong>ƒê·ªãa ch·ªâ:</strong> {product.seller?.location || product.user?.location}</p>
                  )}
                </div>
                <div className="detail-seller-actions">
                  <button className="detail-contact-seller-btn" onClick={handleContactSeller}>
                    Li√™n h·ªá ng∆∞·ªùi b√°n
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ProductDetail;
